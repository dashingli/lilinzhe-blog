import{_ as n,X as s,Y as a,Z as t}from"./framework-b3714b73.js";const e={},p=t(`<h1 id="vue-初始" tabindex="-1"><a class="header-anchor" href="#vue-初始" aria-hidden="true">#</a> Vue 初始</h1><h2 id="vue-的两种版本" tabindex="-1"><a class="header-anchor" href="#vue-的两种版本" aria-hidden="true">#</a> Vue 的两种版本</h2><h2 id="理解两种版本区别" tabindex="-1"><a class="header-anchor" href="#理解两种版本区别" aria-hidden="true">#</a> 理解两种版本区别</h2><table><thead><tr><th></th><th>Vue 完整版</th><th>Vue 非完整版</th><th>备注</th></tr></thead><tbody><tr><td>特点</td><td>有 complier</td><td>无 complier</td><td>complier 大概 30k 左右</td></tr><tr><td>视图</td><td>写在 HTML 里或者 template 选项里</td><td>卸载 render 函数用 h 来创建标签</td><td>h 为 Vue 作者写好传给 render 函数的</td></tr><tr><td>CDN 引入</td><td>vue.js</td><td></td><td></td></tr><tr><td>vue.min.js</td><td>vue.runtime.js</td><td></td><td></td></tr><tr><td>vue.runtime.min.js</td><td>文件名不同,生成环境后缀为.min.js</td><td></td><td></td></tr><tr><td>webpack 引入</td><td>需要配置 alias</td><td>默认使用非完整版</td><td>Vue 作者配置</td></tr><tr><td>@vue/cli 引入</td><td>需要配置</td><td>默认使用非完整版</td><td>Vue 作者配置</td></tr></tbody></table><p>那么到底使用什么版本?</p><p>我们应该使用非完整版,因为它体积小,但是它只支持<strong>h 函数,<strong>我们可以写的时候用 HTML 标签,然后使用 vue-loader 去帮我们把 vue 文件里面写的 HTML 标签转化成</strong>h 函数</strong></p><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><ul><li>完整版:同时包含<strong>编译器</strong>和运行时的版本</li><li>编译器:用来将模板字符串编译成为 JavaScript 渲染函数的代码</li><li>运行时:用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切</li></ul><h2 id="运行时-编译器-vs-只包含运行时" tabindex="-1"><a class="header-anchor" href="#运行时-编译器-vs-只包含运行时" aria-hidden="true">#</a> 运行时 + 编译器 vs. 只包含运行时</h2><p>如果你需要在客户端编译模板 (比如传入一个字符串给  <code>template</code>选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板)，就将需要加上编译器，即完整版：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 需要编译器</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;{{ hi }}&lt;/div&gt;&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不需要编译器</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用  <code>vue-loader</code>  或  <code>vueify</code>  的时候，<code>*.vue</code>  文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可。</p><p>因为运行时版本相比完整版体积要小大约 30%，所以应该尽可能使用这个版本。</p><hr><h2 id="vue-数据响应式" tabindex="-1"><a class="header-anchor" href="#vue-数据响应式" aria-hidden="true">#</a> Vue 数据响应式</h2><h2 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h2><p>给 Vue 实例传入一个 js 对象,作为<code>data</code> 选项,Vue 会遍历这个对象的所有 property,并使用  **<code>Object.defineProperty</code>**把这些 property 全部转为  <strong>getter/setter</strong>。</p><p><strong>getter/setter</strong>对用户来说是不可见的,但是可以让 Vue 能够追踪依赖,在 property 被访问和修改时通知变更。</p><p>每个组件实例都对应一个  <strong>watcher</strong>实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为<strong>依赖</strong>。之后当依赖项的 <strong>setter 触发</strong>时，会通知 watcher，从而使它关联的组件重新渲染。</p><figure><img src="https://cdn.jsdelivr.net/gh/dashingli/imageSave@main/img/202305081101206.png" alt="CleanShot 2023-01-12 at 10.36.37@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2023-01-12 at 10.36.37@2x.png</figcaption></figure><p>过程:</p><p>将 property 全部转为<strong>getter/setter ⇒</strong> 渲染前先获取数据 ⇒ 调用 getter <strong>⇒</strong> 然后数据与 Watcher 建立依赖 ⇒ 当数据发生改变 ⇒ 调用 setter 后通知 Watcher ⇒ 触发重新渲染</p><h2 id="监测变化的注意事项" tabindex="-1"><a class="header-anchor" href="#监测变化的注意事项" aria-hidden="true">#</a> 监测变化的注意事项</h2><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化</p><ul><li>对象</li></ul><p>Vue 无法检测<strong>对象上</strong>property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在<code>data</code>对象上存在才能让 Vue 将它转换为响应式的</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`vm.a\` 是响应式的</span>

vm<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//vm.b在初始实例化的时候没有这个property,所以是</span>
<span class="token comment">// \`vm.b\` 是非响应式的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用  <code>Vue.set(object, propertyName, value)</code>方法向嵌套对象添加响应式 property。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您还可以使用  <code>vm.$set</code>实例方法，这也是全局  <code>Vue.set</code>方法的别名：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有时你可能需要为已有对象赋值多个新 property，比如使用  <code>Object.assign()</code>  或  <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 代替 \`Object.assign(this.someObject, { a: 1, b: 2 })\`</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>someObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组</li></ul><p>Vue 不能检测以下数组的变动：</p><ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不是响应性的</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 不是响应性的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决第一类问题，以下两种方式都可以实现和  <code>vm.items[indexOfItem] = newValue</code>  相同的效果，同时也将在响应式系统内触发状态更新：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Vue.set</span>
Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItem<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// Array.prototype.splice</span>
vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>indexOfItem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue-computed-和-watch" tabindex="-1"><a class="header-anchor" href="#vue-computed-和-watch" aria-hidden="true">#</a> Vue computed 和 watch</h2><h2 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> computed</h2><p><strong>功能上</strong>:computed 是计算属性，是依赖于某个或者某些属性值，只有当依赖的数据发生变化时，才会发生变化.计算属性的结果会被<strong>缓存</strong>,依赖的响应式 property 变化才会重新计算,注意，如果某个依赖 (比如非响应式 property)在该实例范畴之外，则计算属性是不会被更新的。支持对属性的深度遍历监听和立刻执行，</p><p><strong>使用上：<strong>computed 中的函数</strong>必须要用 return 返回</strong>；</p><p><strong>性能上:<strong>computed 中的函数所依赖的属性</strong>没有发生变化</strong>，那么调用当前的函数的时候会从<strong>缓存中读取</strong></p><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h2><p><strong>功能上</strong>:watch 就是单纯的是监听某个数据的变化,然后执行相对应的函数,支持深度监听.</p><p>**使用上:**watch 的回调里面会传入监听属性的新旧值，通过这两个值可以做一些特定的操作，<strong>不是必须</strong>要用 return</p><p>**性能上:**而 watch 在每次监听的值发生变化的时候都会执行回调</p><h2 id="vue-sync" tabindex="-1"><a class="header-anchor" href="#vue-sync" aria-hidden="true">#</a> Vue .sync</h2><p>子组件需要改变父组件传来的<code>prop</code>的值时,我们不能直接在子组件里面修改其值,而应该<code>发出指令</code>,通知父组件,让父组件去修改 prop 值.</p><p><code>发出指令</code> : vm.$emit( eventName, […args] )</p><p>然后父组件有两种写法:</p><p>1.正常写法(与 sync 等价)</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">&lt;</span>myComponent <span class="token operator">:</span>show<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span> @update<span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">&quot;xxx = $event&quot;</span>  style<span class="token operator">=</span><span class="token string">&quot;padding: 30px 20px 30px 5px;border:1px solid #ddd;margin-bottom: 10px;&quot;</span><span class="token operator">&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myComponent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.sync 语法糖写法(与上面等价)</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>myComponent</span> <span class="token attr-name">:show.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>xxx<span class="token punctuation">&#39;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 30px 20px 30px 5px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>1px solid #ddd<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myComponent</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目录结构:</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token punctuation">.</span>
├── App<span class="token punctuation">.</span>vue
├── assets
│   └── logo<span class="token punctuation">.</span>png
├── components
│   └── myComponent<span class="token punctuation">.</span>vue
└── main<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>App.vue</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>details<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
&lt;!--    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>myComponent</span> <span class="token attr-name">:show.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>valueChild<span class="token punctuation">&#39;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span> 30px 20px 30px 5px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span>1px solid #ddd<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myComponent</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">--&gt;
    &lt;myComponent :show=&#39;valueChild&#39; @update:show=&quot;valueChild = $event&quot;  style=&quot;padding: 30px 20px 30px 5px;border:1px solid #ddd;margin-bottom: 10px;&quot;&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myComponent</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    &lt;button @click=&quot;changeValue&quot;&gt;toggle</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
import myComponent from &quot;@/components/myComponent.vue&quot;;
export default{
  components: {myComponent},
  data(){
    return{
      valueChild:true,
    }
  },
  methods:{
    changeValue(){
      this.valueChild = !this.valueChild
    }
  }
}
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>myComponent.vue</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">默认初始值是</span><span class="token punctuation">{</span><span class="token punctuation">{</span>show<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">，所以是显示的</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  &lt;button @click.stop=&quot;closeDiv&quot;&gt;关闭</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
export default {
  name: &quot;myComponent&quot;,
  props:[&#39;show&#39;],
  methods:{
    closeDiv() {
      this.$emit(&#39;update:show&#39;, false); //当button被点击时向父组件发出指令
    }
  }
}
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.js</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;/Users/lilinzhe/Downloads/vue.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;@/App.vue&quot;</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="Vue%2069b85f4a2fb740608e2f0f3a328cbc35/Untitled.mp4">Untitled</a></p>`,66),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","Vue起手式.html.vue"]]);export{d as default};
